@import "compass/css3";

// responsive
@mixin respond-to($media) {
  @if $media == step1 {
    @media only screen and (max-width: 980px) { @content; }
  }
  @else if $media == step2 {
    @media only screen and (max-width: 1220px) { @content; }
  }
  @else if $media == step3 {
    @media only screen and (min-width: 1220px) and (max-width: 1600px) { @content; }
  }
  @else if $media == step4 {
    @media only screen and (min-width: 1600px) and (max-width: 1900px) { @content; }
  }
  @else if $media == step5 {
    @media only screen and (min-width: 1900px) { @content; }
  }
}
// retina bg
@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {
    @content;
  }
}
// sized sprites
@mixin image-size($path){
  width: image-width($path);
  height: image-height($path);
}
//for retina
@mixin image-sizer($path){
  width: image-width($path)/2;
  height: image-height($path)/2;
}
@mixin sized-sprite($map, $sprite){
  background: sprite($map, $sprite) no-repeat;
  @include image-size(sprite-file($map, $sprite));
}
//for retina
@mixin sized-spriter($map, $sprite){
  background: sprite($map, $sprite) no-repeat;
  $ypos: round(nth(sprite-position($map, $sprite), 2) / 2);
  background-position: 0 $ypos;
  @include image-sizer(sprite-file($map, $sprite));
  @include background-size(ceil(image-width(sprite-path($map)) / 2), ceil(image-height(sprite-path($map)) / 2));
}

// BACKGROUND SIZE
@mixin background-size($width: 100%, $height: 100%) {
     -moz-background-size: $width $height;
  -webkit-background-size: $width $height;
          background-size: $width $height;
}
// ROTATE
@mixin rotate($deg: 0) {
     -moz-transform: rotate($deg + deg);
       -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
      -ms-transform: rotate($deg + deg);
          transform: rotate($deg + deg);
}

// TRANSITION
@mixin transition($what: all, $length: 1s, $easing: ease-in-out) {
    -moz-transition:    $what $length $easing;
    -o-transition:      $what $length $easing;
    -webkit-transition: $what $length $easing;
    -ms-transition:     $what $length $easing;
    transition:         $what $length $easing;
}

// image replacement
%hide-text{
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
}
%clr{
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
  *zoom: 1;
}
// placeholder color
@mixin input-placeholder($color) {
  &.placeholder {
    color: $color;
  }
  &:-moz-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}
// sized sprites
@mixin image-size($path){
  width: image-width($path);
  height: image-height($path);
}
@mixin sized-sprite($map, $sprite){
  background: sprite($map, $sprite) no-repeat;
  @include image-size(sprite-file($map, $sprite));
}